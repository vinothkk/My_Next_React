const filterStructure = (items) => {
    if (!items || !Array.isArray(items)) return [];

    return items
        .map(item => {
            const itemCopy = { ...item };

            // Check if current item matches
            const directMatch = searchFields.some(field =>
                item[field] && String(item[field]).toLowerCase().includes(termLower)
            );

            // Process subRows recursively
            let filteredSubRows = [];
            if (item.subRows && Array.isArray(item.subRows)) {
                filteredSubRows = filterStructure(item.subRows);
            }

            const hasMatchingSubRow = filteredSubRows.length > 0;
            const matches = directMatch || hasMatchingSubRow;

            if (!matches) return null;

            // Highlight this item's fields if needed
            searchFields.forEach(field => {
                if (itemCopy[field]) {
                    itemCopy[field] = highlightText(String(item[field]), term);
                }
            });

            // Attach filtered subRows if any
            if (hasMatchingSubRow) {
                itemCopy.subRows = filteredSubRows;

                // Expand this row in MRT
                const itemPath = uniquePathsMap.get(item);
                if (itemPath) expanded[itemPath] = true;
            }

            return itemCopy;
        })
        .filter(Boolean); // Remove nulls
};
