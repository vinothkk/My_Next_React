const filterStructure = (items) => {
    if (!items || !Array.isArray(items)) return [];

    return items.reduce((acc, item) => {
        const itemPath = uniquePathsMap.get(item);
        const itemCopy = { ...item };

        // Check if current item matches
        const directMatch = searchFields.some(field =>
            item[field] && String(item[field]).toLowerCase().includes(termLower)
        );

        // Recurse into subRows
        let filteredSubRows = [];
        if (item.subRows && Array.isArray(item.subRows)) {
            filteredSubRows = filterStructure(item.subRows);
        }

        const hasMatchingSubRow = filteredSubRows.length > 0;
        const isMatch = directMatch || hasMatchingSubRow;

        if (isMatch) {
            // Highlight matching fields
            if (directMatch) {
                searchFields.forEach(field => {
                    if (itemCopy[field]) {
                        itemCopy[field] = highlightText(String(item[field]), term);
                    }
                });
            }

            // Assign only matching subRows
            itemCopy.subRows = filteredSubRows;

            // Mark for expansion if it has sub matches
            if (hasMatchingSubRow && itemPath) {
                expanded[itemPath] = true;
            }

            acc.push(itemCopy);
        }

        return acc;
    }, []);
};
