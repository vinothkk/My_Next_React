import React, { useMemo, useState } from "react";
import MaterialReactTable from "material-react-table";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs from "dayjs";

const YourComponent = () => {
  const [data] = useState([
    { id: 1, date: "2023-01-01" },
    { id: 2, date: "2023-06-15" },
    { id: 3, date: "2024-02-20" },
  ]);

  const [minDate, setMinDate] = useState(null);
  const [maxDate, setMaxDate] = useState(null);

  const columns = useMemo(
    () => [
      {
        accessorKey: "date",
        header: "Date",
        filterVariant: "date-range",
        filterFn: "between",
        muiFilterDatePickerProps: ({ rangePosition }) => ({
          minDate: rangePosition === "end" && minDate ? dayjs(minDate) : null,
          maxDate: rangePosition === "start" && maxDate ? dayjs(maxDate) : null,
          onChange: (newValue) => {
            if (rangePosition === "start") {
              if (maxDate && dayjs(newValue).isAfter(maxDate)) {
                setMaxDate(null);
              }
              setMinDate(newValue);
            } else if (rangePosition === "end") {
              if (minDate && dayjs(newValue).isBefore(minDate)) {
                setMinDate(null);
              }
              setMaxDate(newValue);
            }
          },
        }),
      },
    ],
    [minDate, maxDate]
  );

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <MaterialReactTable
        columns={columns}
        data={data}
        enableColumnFilters
        state={{
          columnFilters: [
            {
              id: "date",
              value: [minDate, maxDate],
            },
          ],
        }}
        onColumnFiltersChange={(columnFilters) => {
          const dateFilter = columnFilters.find((filter) => filter.id === "date");
          if (dateFilter && dateFilter.value) {
            setMinDate(dateFilter.value[0]);
            setMaxDate(dateFilter.value[1]);
          } else {
            setMinDate(null);
            setMaxDate(null);
          }
        }}
      />
    </LocalizationProvider>
  );
};

export default YourComponent;
