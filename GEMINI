import React, { useMemo, useState } from "react";
import MaterialReactTable from "material-react-table";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import dayjs from "dayjs";
import { Box } from "@mui/material";

const CustomDateRangeFilter = ({ column, table }) => {
  const [minDate, setMinDate] = useState(null);
  const [maxDate, setMaxDate] = useState(null);

  const handleMinDateChange = (date) => {
    setMinDate(date);
    if (maxDate && date && date.isAfter(maxDate)) {
      setMaxDate(null);
    }
    table.setColumnFilters([
      { id: column.id, value: [date, maxDate] },
    ]);
  };

  const handleMaxDateChange = (date) => {
    setMaxDate(date);
    if (minDate && date && date.isBefore(minDate)) {
      setMinDate(null);
    }
    table.setColumnFilters([
      { id: column.id, value: [minDate, date] },
    ]);
  };

  return (
    <Box sx={{ display: "flex", gap: 1 }}>
      <DatePicker
        label="Min Date"
        value={minDate}
        onChange={handleMinDateChange}
        maxDate={maxDate}
      />
      <DatePicker
        label="Max Date"
        value={maxDate}
        onChange={handleMaxDateChange}
        minDate={minDate}
      />
    </Box>
  );
};

const YourComponent = () => {
  // ... your data

  const columns = useMemo(
    () => [
      {
        accessorFn: (originalRow) => new Date(originalRow.closeDate),
        accessorKey: "Close Date",
        header: "Close Date",
        filterComponent: CustomDateRangeFilter, // Use custom filter
      },
    ],
    []
  );

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <MaterialReactTable
        columns={columns}
        data={data}
        enableColumnFilters
      />
    </LocalizationProvider>
  );
};

export default YourComponent;
__________________________________________________________________________
_
import React, { useMemo, useState } from "react";
import MaterialReactTable, { filterFns } from "material-react-table";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs from "dayjs";

const YourComponent = () => {
    // ... your data

    const [minDate, setMinDate] = useState(null);
    const [maxDate, setMaxDate] = useState(null);

    const columns = useMemo(() => [
        {
            accessorFn: (originalRow) => new Date(originalRow.closeDate),
            accessorKey: "Close Date",
            header: "Close Date",
            filterVariant: "date-range",
            filterFn: filterFns.betweenDates, // Use filterFns.betweenDates
            muiFilterDatePickerProps: ({ rangePosition }) => ({
                minDate: rangePosition === "end" && minDate ? dayjs(minDate) : null,
                maxDate: rangePosition === "start" && maxDate ? dayjs(maxDate) : null,
                onChange: (newValue) => {
                    if (rangePosition === "start") {
                        if (maxDate && dayjs(newValue).isAfter(maxDate)) {
                            setMaxDate(null);
                        }
                        setMinDate(newValue);
                    } else if (rangePosition === "end") {
                        if (minDate && dayjs(newValue).isBefore(minDate)) {
                            setMinDate(null);
                        }
                        setMaxDate(newValue);
                    }
                },
            }),
        },
    ], [minDate, maxDate]);

    return (
        <LocalizationProvider dateAdapter={AdapterDayjs}>
            <MaterialReactTable
                columns={columns}
                data={data}
                enableColumnFilters
                state={{
                    columnFilters: [
                        {
                            id: "Close Date",
                            value: [minDate, maxDate],
                        },
                    ],
                }}
                onColumnFiltersChange={(columnFilters) => {
                    const dateFilter = columnFilters.find((filter) => filter.id === "Close Date");
                    if (dateFilter && dateFilter.value) {
                        const [newMinDate, newMaxDate] = dateFilter.value;
                        setMinDate(newMinDate);
                        setMaxDate(newMaxDate);
                    } else {
                        setMinDate(null);
                        setMaxDate(null);
                    }
                }}
            />
        </LocalizationProvider>
    );
};

export default YourComponent;

-------------------------------------------------------------------------------

import React, { useMemo, useState } from "react";
import MaterialReactTable from "material-react-table";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs from "dayjs";

const YourComponent = () => {
  const [data] = useState([
    { id: 1, date: "2023-01-01" },
    { id: 2, date: "2023-06-15" },
    { id: 3, date: "2024-02-20" },
  ]);

  const [minDate, setMinDate] = useState(null);
  const [maxDate, setMaxDate] = useState(null);

  const columns = useMemo(
    () => [
      {
        accessorKey: "date",
        header: "Date",
        filterVariant: "date-range",
        filterFn: "between",
        muiFilterDatePickerProps: ({ rangePosition }) => ({
          minDate: rangePosition === "end" && minDate ? dayjs(minDate) : null,
          maxDate: rangePosition === "start" && maxDate ? dayjs(maxDate) : null,
          onChange: (newValue) => {
            if (rangePosition === "start") {
              if (maxDate && dayjs(newValue).isAfter(maxDate)) {
                setMaxDate(null);
              }
              setMinDate(newValue);
            } else if (rangePosition === "end") {
              if (minDate && dayjs(newValue).isBefore(minDate)) {
                setMinDate(null);
              }
              setMaxDate(newValue);
            }
          },
        }),
      },
    ],
    [minDate, maxDate]
  );

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <MaterialReactTable
        columns={columns}
        data={data}
        enableColumnFilters
        state={{
          columnFilters: [
            {
              id: "date",
              value: [minDate, maxDate],
            },
          ],
        }}
        onColumnFiltersChange={(columnFilters) => {
          const dateFilter = columnFilters.find((filter) => filter.id === "date");
          if (dateFilter && dateFilter.value) {
            setMinDate(dateFilter.value[0]);
            setMaxDate(dateFilter.value[1]);
          } else {
            setMinDate(null);
            setMaxDate(null);
          }
        }}
      />
    </LocalizationProvider>
  );
};

export default YourComponent;
