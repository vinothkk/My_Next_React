Cloudi
=======================
import React, { useMemo, useState, useCallback } from 'react';
import MaterialReactTable, { 
  MRT_ColumnDef, 
  MRT_ColumnFilterProps 
} from 'material-react-table';
import { 
  LocalizationProvider, 
  DatePicker 
} from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { Box, Typography } from '@mui/material';
import dayjs, { Dayjs } from 'dayjs';

// Custom Date Range Filter Component
const CustomDateRangeFilter = ({ 
  column, 
  table 
}: MRT_ColumnFilterProps<any>) => {
  const [minDate, setMinDate] = useState<Dayjs | null>(null);
  const [maxDate, setMaxDate] = useState<Dayjs | null>(null);

  const handleMinDateChange = (date: Dayjs | null) => {
    // Convert to dayjs if it's a Date object
    const dayjsDate = date ? dayjs(date) : null;
    
    setMinDate(dayjsDate);
    
    // Reset max date if it's now invalid
    const updatedMaxDate = (maxDate && dayjsDate && maxDate.isBefore(dayjsDate)) 
      ? null 
      : maxDate;
    
    setMaxDate(updatedMaxDate);

    // Update column filters
    table.setColumnFilters(
      dayjsDate || updatedMaxDate 
        ? [{ 
            id: column.id, 
            value: [dayjsDate, updatedMaxDate] 
          }] 
        : []
    );
  };

  const handleMaxDateChange = (date: Dayjs | null) => {
    // Convert to dayjs if it's a Date object
    const dayjsDate = date ? dayjs(date) : null;
    
    setMaxDate(dayjsDate);
    
    // Reset min date if it's now invalid
    const updatedMinDate = (minDate && dayjsDate && minDate.isAfter(dayjsDate)) 
      ? null 
      : minDate;
    
    setMinDate(updatedMinDate);

    // Update column filters
    table.setColumnFilters(
      dayjsDate || updatedMinDate 
        ? [{ 
            id: column.id, 
            value: [updatedMinDate, dayjsDate] 
          }] 
        : []
    );
  };

  // Custom function to disable dates
  const shouldDisableMinDate = useCallback((day: Dayjs) => {
    // If max date is set, disable dates after max date
    return maxDate ? day.isAfter(maxDate) : false;
  }, [maxDate]);

  const shouldDisableMaxDate = useCallback((day: Dayjs) => {
    // If min date is set, disable dates before min date
    return minDate ? day.isBefore(minDate) : false;
  }, [minDate]);

  return (
    <Box sx={{ 
      display: 'flex', 
      flexDirection: 'column', 
      gap: 2, 
      padding: 2,
      width: '250px' 
    }}>
      <Typography variant="subtitle2">Date Range Filter</Typography>
      <DatePicker
        label="Min Date"
        value={minDate}
        onChange={handleMinDateChange}
        maxDate={maxDate}
        shouldDisableDate={shouldDisableMinDate}
        slotProps={{
          textField: { 
            variant: 'outlined',
            fullWidth: true 
          }
        }}
      />
      <DatePicker
        label="Max Date"
        value={maxDate}
        onChange={handleMaxDateChange}
        minDate={minDate}
        shouldDisableDate={shouldDisableMaxDate}
        slotProps={{
          textField: { 
            variant: 'outlined',
            fullWidth: true 
          }
        }}
      />
    </Box>
  );
};

// Main Component
const DateRangeFilterTable = () => {
  // Sample data - replace with your actual data
  const [data, setData] = useState([
    { id: 1, date: '2023-01-01' },
    { id: 2, date: '2023-06-15' },
    { id: 3, date: '2024-02-20' },
    { id: 4, date: '2024-03-15' },
    { id: 5, date: '2024-07-10' },
  ]);

  const columns = useMemo<MRT_ColumnDef<any>[]>(() => [
    {
      accessorKey: 'date',
      header: 'Date',
      filterVariant: 'custom',
      Filter: CustomDateRangeFilter, // Use 'Filter' instead of 'filterComponent'
      
      // Custom filter function for date range
      filterFn: (row, columnId, filterValues) => {
        const [minDate, maxDate] = filterValues || [];
        
        // If no filter values are set, show all rows
        if (!minDate && !maxDate) return true;
        
        const rowDate = dayjs(row.original[columnId]);
        
        // Check if row date is within the selected range
        const isAfterMin = !minDate || rowDate.isAfter(dayjs(minDate).startOf('day'));
        const isBeforeMax = !maxDate || rowDate.isBefore(dayjs(maxDate).endOf('day'));
        
        return isAfterMin && isBeforeMax;
      },
    },
    // Add more columns as needed
  ], []);

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <MaterialReactTable
        columns={columns}
        data={data}
        enableColumnFilters
        enableFiltering
        initialState={{ 
          showColumnFilters: true 
        }}
      />
    </LocalizationProvider>
  );
};

export default DateRangeFilterTable;
-------------------------------------------------------------------------
import React, { useMemo, useState, useCallback } from 'react';
import MaterialReactTable, { 
  MRT_ColumnDef, 
  MRT_ColumnFilterProps 
} from 'material-react-table';
import { 
  LocalizationProvider, 
  DatePicker 
} from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { Box } from '@mui/material';
import dayjs, { Dayjs } from 'dayjs';

// Custom Date Range Filter Component
const CustomDateRangeFilter = ({ 
  column, 
  table 
}: MRT_ColumnFilterProps<any>) => {
  const [minDate, setMinDate] = useState<Dayjs | null>(null);
  const [maxDate, setMaxDate] = useState<Dayjs | null>(null);

  const handleMinDateChange = (date: Dayjs | null) => {
    setMinDate(date);
    
    // Reset max date if it's now invalid
    const updatedMaxDate = (maxDate && date && maxDate.isBefore(date)) 
      ? null 
      : maxDate;
    
    setMaxDate(updatedMaxDate);

    // Update column filters
    table.setColumnFilters(
      date || updatedMaxDate 
        ? [{ 
            id: column.id, 
            value: [date, updatedMaxDate] 
          }] 
        : []
    );
  };

  const handleMaxDateChange = (date: Dayjs | null) => {
    setMaxDate(date);
    
    // Reset min date if it's now invalid
    const updatedMinDate = (minDate && date && minDate.isAfter(date)) 
      ? null 
      : minDate;
    
    setMinDate(updatedMinDate);

    // Update column filters
    table.setColumnFilters(
      date || updatedMinDate 
        ? [{ 
            id: column.id, 
            value: [updatedMinDate, date] 
          }] 
        : []
    );
  };

  // Custom function to disable dates
  const shouldDisableMinDate = useCallback((day: Dayjs) => {
    // If max date is set, disable dates after max date
    return maxDate ? day.isAfter(maxDate) : false;
  }, [maxDate]);

  const shouldDisableMaxDate = useCallback((day: Dayjs) => {
    // If min date is set, disable dates before min date
    return minDate ? day.isBefore(minDate) : false;
  }, [minDate]);

  return (
    <Box sx={{ display: 'flex', gap: 1, flexDirection: 'column' }}>
      <DatePicker
        label="Min Date"
        value={minDate}
        onChange={handleMinDateChange}
        maxDate={maxDate}
        shouldDisableDate={shouldDisableMinDate}
        slotProps={{
          textField: { 
            variant: 'standard',
            fullWidth: true 
          }
        }}
      />
      <DatePicker
        label="Max Date"
        value={maxDate}
        onChange={handleMaxDateChange}
        minDate={minDate}
        shouldDisableDate={shouldDisableMaxDate}
        slotProps={{
          textField: { 
            variant: 'standard',
            fullWidth: true 
          }
        }}
      />
    </Box>
  );
};

// Main Component
const DateRangeFilterTable = () => {
  // Sample data - replace with your actual data
  const [data, setData] = useState([
    { id: 1, date: '2023-01-01' },
    { id: 2, date: '2023-06-15' },
    { id: 3, date: '2024-02-20' },
    { id: 4, date: '2024-03-15' },
    { id: 5, date: '2024-07-10' },
  ]);

  const columns = useMemo<MRT_ColumnDef<any>[]>(() => [
    {
      accessorKey: 'date',
      header: 'Date',
      filterVariant: 'custom',
      filterComponent: CustomDateRangeFilter,
      
      // Custom filter function for date range
      filterFn: (row, columnId, filterValues) => {
        const [minDate, maxDate] = filterValues || [];
        
        // If no filter values are set, show all rows
        if (!minDate && !maxDate) return true;
        
        const rowDate = dayjs(row.original[columnId]);
        
        // Check if row date is within the selected range
        const isAfterMin = !minDate || rowDate.isAfter(dayjs(minDate).startOf('day'));
        const isBeforeMax = !maxDate || rowDate.isBefore(dayjs(maxDate).endOf('day'));
        
        return isAfterMin && isBeforeMax;
      },
    },
    // Add more columns as needed
  ], []);

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <MaterialReactTable
        columns={columns}
        data={data}
        enableColumnFilters
        enableFiltering
        initialState={{ 
          showColumnFilters: true 
        }}
      />
    </LocalizationProvider>
  );
};

export default DateRangeFilterTable;
=======================
import React, { useMemo, useState } from "react";
import MaterialReactTable from "material-react-table";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import dayjs from "dayjs";
import { Box, Popover } from "@mui/material";

const CustomDateRangeFilter = ({ column, table, anchorEl, onClose }) => {
  const [minDate, setMinDate] = useState(null);
  const [maxDate, setMaxDate] = useState(null);

  const handleMinDateChange = (date) => {
    setMinDate(date);
    if (maxDate && date && date.isAfter(maxDate)) {
      setMaxDate(null);
    }
    table.setColumnFilters([{ id: column.id, value: [date, maxDate] }]);
  };

  const handleMaxDateChange = (date) => {
    setMaxDate(date);
    if (minDate && date && date.isBefore(minDate)) {
      setMinDate(null);
    }
    table.setColumnFilters([{ id: column.id, value: [minDate, date] }]);
  };

  return (
    <Popover
      open={Boolean(anchorEl)}
      anchorEl={anchorEl}
      onClose={onClose}
      anchorOrigin={{
        vertical: "bottom",
        horizontal: "left",
      }}
      transformOrigin={{
        vertical: "top",
        horizontal: "left",
      }}
    >
      <Box sx={{ p: 2, display: "flex", gap: 1 }}>
        <DatePicker
          label="Min Date"
          value={minDate}
          onChange={handleMinDateChange}
          maxDate={maxDate}
        />
        <DatePicker
          label="Max Date"
          value={maxDate}
          onChange={handleMaxDateChange}
          minDate={minDate}
        />
      </Box>
    </Popover>
  );
};

const YourComponent = () => {
  // ... your data

  const columns = useMemo(
    () => [
      {
        accessorFn: (originalRow) => new Date(originalRow.closeDate),
        accessorKey: "Close Date",
        header: "Close Date",
        muiTableHeadCellFilterTextFieldProps: ({ column, table, anchorEl, onClose }) => ({
          children: (
            <CustomDateRangeFilter
              column={column}
              table={table}
              anchorEl={anchorEl}
              onClose={onClose}
            />
          ),
        }),
      },
    ],
    []
  );

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <MaterialReactTable columns={columns} data={data} enableColumnFilters />
    </LocalizationProvider>
  );
};

export default YourComponent;
==============================================================================================


import React, { useMemo, useState } from "react";
import MaterialReactTable from "material-react-table";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import dayjs from "dayjs";
import { Box } from "@mui/material";

const CustomDateRangeFilter = ({ column, table }) => {
  const [minDate, setMinDate] = useState(null);
  const [maxDate, setMaxDate] = useState(null);

  const handleMinDateChange = (date) => {
    setMinDate(date);
    if (maxDate && date && date.isAfter(maxDate)) {
      setMaxDate(null);
    }
    table.setColumnFilters([
      { id: column.id, value: [date, maxDate] },
    ]);
  };

  const handleMaxDateChange = (date) => {
    setMaxDate(date);
    if (minDate && date && date.isBefore(minDate)) {
      setMinDate(null);
    }
    table.setColumnFilters([
      { id: column.id, value: [minDate, date] },
    ]);
  };

  return (
    <Box sx={{ display: "flex", gap: 1 }}>
      <DatePicker
        label="Min Date"
        value={minDate}
        onChange={handleMinDateChange}
        maxDate={maxDate}
      />
      <DatePicker
        label="Max Date"
        value={maxDate}
        onChange={handleMaxDateChange}
        minDate={minDate}
      />
    </Box>
  );
};

const YourComponent = () => {
  // ... your data

  const columns = useMemo(
    () => [
      {
        accessorFn: (originalRow) => new Date(originalRow.closeDate),
        accessorKey: "Close Date",
        header: "Close Date",
        filterComponent: CustomDateRangeFilter, // Use custom filter
      },
    ],
    []
  );

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <MaterialReactTable
        columns={columns}
        data={data}
        enableColumnFilters
      />
    </LocalizationProvider>
  );
};

export default YourComponent;
__________________________________________________________________________
_
import React, { useMemo, useState } from "react";
import MaterialReactTable, { filterFns } from "material-react-table";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs from "dayjs";

const YourComponent = () => {
    // ... your data

    const [minDate, setMinDate] = useState(null);
    const [maxDate, setMaxDate] = useState(null);

    const columns = useMemo(() => [
        {
            accessorFn: (originalRow) => new Date(originalRow.closeDate),
            accessorKey: "Close Date",
            header: "Close Date",
            filterVariant: "date-range",
            filterFn: filterFns.betweenDates, // Use filterFns.betweenDates
            muiFilterDatePickerProps: ({ rangePosition }) => ({
                minDate: rangePosition === "end" && minDate ? dayjs(minDate) : null,
                maxDate: rangePosition === "start" && maxDate ? dayjs(maxDate) : null,
                onChange: (newValue) => {
                    if (rangePosition === "start") {
                        if (maxDate && dayjs(newValue).isAfter(maxDate)) {
                            setMaxDate(null);
                        }
                        setMinDate(newValue);
                    } else if (rangePosition === "end") {
                        if (minDate && dayjs(newValue).isBefore(minDate)) {
                            setMinDate(null);
                        }
                        setMaxDate(newValue);
                    }
                },
            }),
        },
    ], [minDate, maxDate]);

    return (
        <LocalizationProvider dateAdapter={AdapterDayjs}>
            <MaterialReactTable
                columns={columns}
                data={data}
                enableColumnFilters
                state={{
                    columnFilters: [
                        {
                            id: "Close Date",
                            value: [minDate, maxDate],
                        },
                    ],
                }}
                onColumnFiltersChange={(columnFilters) => {
                    const dateFilter = columnFilters.find((filter) => filter.id === "Close Date");
                    if (dateFilter && dateFilter.value) {
                        const [newMinDate, newMaxDate] = dateFilter.value;
                        setMinDate(newMinDate);
                        setMaxDate(newMaxDate);
                    } else {
                        setMinDate(null);
                        setMaxDate(null);
                    }
                }}
            />
        </LocalizationProvider>
    );
};

export default YourComponent;

-------------------------------------------------------------------------------

import React, { useMemo, useState } from "react";
import MaterialReactTable from "material-react-table";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs from "dayjs";

const YourComponent = () => {
  const [data] = useState([
    { id: 1, date: "2023-01-01" },
    { id: 2, date: "2023-06-15" },
    { id: 3, date: "2024-02-20" },
  ]);

  const [minDate, setMinDate] = useState(null);
  const [maxDate, setMaxDate] = useState(null);

  const columns = useMemo(
    () => [
      {
        accessorKey: "date",
        header: "Date",
        filterVariant: "date-range",
        filterFn: "between",
        muiFilterDatePickerProps: ({ rangePosition }) => ({
          minDate: rangePosition === "end" && minDate ? dayjs(minDate) : null,
          maxDate: rangePosition === "start" && maxDate ? dayjs(maxDate) : null,
          onChange: (newValue) => {
            if (rangePosition === "start") {
              if (maxDate && dayjs(newValue).isAfter(maxDate)) {
                setMaxDate(null);
              }
              setMinDate(newValue);
            } else if (rangePosition === "end") {
              if (minDate && dayjs(newValue).isBefore(minDate)) {
                setMinDate(null);
              }
              setMaxDate(newValue);
            }
          },
        }),
      },
    ],
    [minDate, maxDate]
  );

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <MaterialReactTable
        columns={columns}
        data={data}
        enableColumnFilters
        state={{
          columnFilters: [
            {
              id: "date",
              value: [minDate, maxDate],
            },
          ],
        }}
        onColumnFiltersChange={(columnFilters) => {
          const dateFilter = columnFilters.find((filter) => filter.id === "date");
          if (dateFilter && dateFilter.value) {
            setMinDate(dateFilter.value[0]);
            setMaxDate(dateFilter.value[1]);
          } else {
            setMinDate(null);
            setMaxDate(null);
          }
        }}
      />
    </LocalizationProvider>
  );
};

export default YourComponent;
