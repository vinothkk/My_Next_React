

function filterResponseData(responseData, filterCriteria) {
  return responseData.filter(item => {
    let matchesPriority = true;
    let matchesRisk = true;

    for (const criterion of filterCriteria) {
      if (criterion.id === 'inquiryPriority') {
        matchesPriority = criterion.value.includes(item.inquiryPriority);
      } else if (criterion.id === 'risk') {
        const riskValue = criterion.value[0];
        let itemRisk;

        if (typeof riskValue === 'boolean') {
          itemRisk = item.detailData.risk === 'Yes';
          matchesRisk = riskValue === itemRisk;
        }
      }
    }

    // if filterCriteria only contain risk, matchesPriority should be true.
    if (!filterCriteria.some(criterion => criterion.id === 'inquiryPriority')){
        matchesPriority = true;
    }

    return matchesPriority && matchesRisk;
  });
}


=============================


function filterResponseData(responseData, filterCriteria) {
  return responseData.filter(item => {
    let matchesPriority = true;
    let matchesRisk = true;

    for (const criterion of filterCriteria) {
      if (criterion.id === 'inquiryPriority') {
        matchesPriority = criterion.value.includes(item.inquiryPriority);
      } else if (criterion.id === 'risk') {
        const riskValue = criterion.value[0];
        let itemRisk;

        if (typeof riskValue === 'boolean') {
          itemRisk = item.detailData.risk === 'Yes'; // Convert 'Yes' to true and 'No' to false
          matchesRisk = riskValue === itemRisk;
        } else {
            matchesRisk = true; // if risk is not boolean, skip the risk check.
        }
      }
    }

    return matchesPriority && matchesRisk;
  });
}

const filteredData = filterResponseData(responseData, filterCriteria);
console.log(filteredData);

===========================================================================================================

const data = [
  { createdDate: "2/21/2025 10:31 AM", ageInDay: 37 },
  { createdDate: "2/22/2025 10:31 AM", ageInDay: 80 },
  { createdDate: "2/24/2025 10:31 AM", ageInDay: 85 },
  { createdDate: "3/12/2025 10:44 PM", ageInDay: 85 },
];

// Get current date
const currentDate = new Date();

const filteredData = data.filter(item => {
  try {
    // Split the date string into components
    const [datePart, timePart, ampm] = item.createdDate.split(" ");
    
    // Split date part
    const [month, day, year] = datePart.split("/").map(num => parseInt(num, 10));
    
    // Split time part
    const [hours, minutes] = timePart.split(":").map(num => parseInt(num, 10));
    
    // Adjust hours for AM/PM
    let adjustedHours = hours;
    if (ampm === "PM" && hours < 12) {
      adjustedHours += 12;
    } else if (ampm === "AM" && hours === 12) {
      adjustedHours = 0;
    }
    
    // Check if date is valid
    const isValidDate = (y, m, d) => {
      const date = new Date(y, m - 1, d); // Adjust month (JS months are 0-indexed)
      return date.getFullYear() === y && date.getMonth() === m - 1 && date.getDate() === d;
    };
    
    if (!isValidDate(year, month, day)) {
      console.log(`Skipping invalid date: ${item.createdDate}`);
      return false;
    }
    
    // Create valid date object
    const itemDate = new Date(year, month - 1, day, adjustedHours, minutes);
    console.log(`Valid date: ${itemDate.toString()} from ${item.createdDate}`);
    
    // Compare with current date
    return itemDate < currentDate;
  } catch (e) {
    console.log(`Error parsing date: ${item.createdDate} - ${e.message}`);
    return false;
  }
});

console.log(filteredData);

const data = [
  { createdDate: "2/21/2025 10:31AM", ageInDay: 37 },
  { createdDate: "2/22/2025 10:31AM", ageInDay: 80 },
  { createdDate: "2/24/2025 10:31AM", ageInDay: 85 },
  { createdDate: "2/30/2025 10:31AM", ageInDay: 85 }, // Invalid date
];

// Get current date
const currentDate = new Date();

const filteredData = data.filter(item => {
  // Parse date parts manually
  const parts = item.createdDate.match(/(\d+)\/(\d+)\/(\d+)\s+(\d+):(\d+)(AM|PM)/);
  
  if (!parts) {
    console.log(`Invalid date format: ${item.createdDate}`);
    return false;
  }
  
  let [_, month, day, year, hours, minutes, ampm] = parts;
  
  month = parseInt(month, 10) - 1; // JS months are 0-indexed
  day = parseInt(day, 10);
  year = parseInt(year, 10);
  hours = parseInt(hours, 10);
  minutes = parseInt(minutes, 10);
  
  // Convert 12-hour to 24-hour
  if (ampm === 'PM' && hours < 12) hours += 12;
  if (ampm === 'AM' && hours === 12) hours = 0;
  
  // Check for valid month and day
  if (month < 0 || month > 11) {
    console.log(`Invalid month in date: ${item.createdDate}`);
    return false;
  }
  
  // Create a date object and verify it's valid by checking the day
  const itemDate = new Date(year, month, day, hours, minutes);
  
  // Check if the day is valid (if we set day=30 in February, JS rolls to March)
  if (itemDate.getDate() !== day) {
    console.log(`Invalid day in date: ${item.createdDate}`);
    return false;
  }
  
  console.log(`Valid date parsed: ${itemDate} from ${item.createdDate}`);
  return itemDate < currentDate;
});

console.log(filteredData);
