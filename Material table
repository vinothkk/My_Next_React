import React, { useMemo, useState } from 'react';
import MaterialReactTable, { 
  type MRT_ColumnDef,
  type MRT_TableOptions,
} from 'material-react-table';
import { parseISO, isAfter, isBefore } from 'date-fns';

interface YourDataType {
  id: number;
  dateColumn: string; // or Date
}

const YourComponent = () => {
  // Sample data
  const [data, setData] = useState<YourDataType[]>([
    { id: 1, dateColumn: '2023-01-01' },
    // ... more data
  ]);

  const columns = useMemo<MRT_ColumnDef<YourDataType>[]>(() => [
    {
      accessorKey: 'dateColumn',
      header: 'Date Column',
      filterVariant: 'date-range',
      
      // Custom filter function for date range
      filterFn: (row, columnId, filterValue) => {
        const rowValue = parseISO(row.getValue(columnId));
        const [minDate, maxDate] = filterValue;

        // If no filter applied, return true
        if (!minDate && !maxDate) return true;

        // Convert to Date objects if they're strings
        const parsedMinDate = minDate ? parseISO(minDate) : null;
        const parsedMaxDate = maxDate ? parseISO(maxDate) : null;

        // Validation logic
        if (parsedMinDate && parsedMaxDate) {
          // Ensure min date is not after max date
          if (isAfter(parsedMinDate, parsedMaxDate)) {
            // Reset the filter or show an error
            return false;
          }
        }

        // Apply standard date range filtering
        const isAboveMin = !parsedMinDate || !isBefore(rowValue, parsedMinDate);
        const isBelowMax = !parsedMaxDate || !isAfter(rowValue, parsedMaxDate);

        return isAboveMin && isBelowMax;
      },
      
      // Optional: Customize filter component to enforce validation
      Filter: ({ column }) => {
        const { filterValue, setFilterValue } = column;
        
        const handleDateChange = (newDates) => {
          const [minDate, maxDate] = newDates;
          
          // Validate date range
          if (minDate && maxDate) {
            const parsedMinDate = parseISO(minDate);
            const parsedMaxDate = parseISO(maxDate);
            
            // If min date is after max date, reset or show error
            if (isAfter(parsedMinDate, parsedMaxDate)) {
              // Option 1: Reset filter
              setFilterValue([null, null]);
              
              // Option 2: Show an error (you'd need to implement error display)
              // For example, using a snackbar or toast notification
              console.error('Minimum date cannot be after maximum date');
              
              return;
            }
          }
          
          // Set the filter value
          setFilterValue(newDates);
        };

        return (
          <div>
            {/* Default date range filter component */}
            <input
              type="date"
              value={filterValue?.[0] || ''}
              onChange={(e) => {
                const newMinDate = e.target.value;
                handleDateChange([newMinDate, filterValue?.[1]]);
              }}
            />
            <input
              type="date"
              value={filterValue?.[1] || ''}
              onChange={(e) => {
                const newMaxDate = e.target.value;
                handleDateChange([filterValue?.[0], newMaxDate]);
              }}
            />
          </div>
        );
      },
    },
  ], []);

  return (
    <MaterialReactTable
      columns={columns}
      data={data}
      // Additional configuration
      enableColumnFilters
      enableFilters
    />
  );
};

export default YourComponent;



import React, { useMemo, useState } from 'react';
import MaterialReactTable from 'material-react-table';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { 
  isValid as dateIsValid, 
  parseISO, 
  parse, 
  format 
} from 'date-fns';

const YourComponent = () => {
  const [data, setData] = useState([
    { id: 1, date: '2023-01-01' },
    { id: 2, date: '2023-06-15' },
    { id: 3, date: '2024-02-20' },
  ]);

  const columns = useMemo(() => [
    {
      accessorKey: 'date',
      header: 'Date',
      filterVariant: 'date-range',
      
      // Custom date validation and formatting
      Cell: ({ cell }) => {
        const dateValue = cell.getValue();
        // Safely format the date
        try {
          return dateValue 
            ? format(parseISO(dateValue), 'PP') 
            : '';
        } catch {
          return dateValue || '';
        }
      },

      // Ensure date is processed correctly
      accessorFn: (originalRow) => {
        try {
          // Convert to Date object if it's a string
          return originalRow.date 
            ? parseISO(originalRow.date) 
            : null;
        } catch {
          return null;
        }
      },

      // Date range filter configuration
      muiFilterTextFieldProps: {
        // Custom date parsing and validation
        InputProps: {
          inputProps: {
            min: '2023-01-01',
            max: '2024-12-31'
          }
        }
      },

      // MUI Date Picker specific props
      muiFilterDatePickerProps: {
        // Explicitly set date adapter
        slots: {
          textField: (props) => (
            <TextField 
              {...props}
              error={!dateIsValid(props.value)}
            />
          )
        },
        
        // Date range constraints
        minDate: new Date('2023-01-01'),
        maxDate: new Date('2024-12-31'),

        // Custom date validation
        onError: (error, value) => {
          console.log('Date Picker Error:', error);
        },

        // Ensure proper date parsing
        parseDate: (value) => {
          if (!value) return null;
          
          // Try multiple parsing strategies
          const parsedDate = 
            parseISO(value) || 
            parse(value, 'yyyy-MM-dd', new Date()) ||
            parse(value, 'MM/dd/yyyy', new Date());
          
          return dateIsValid(parsedDate) ? parsedDate : null;
        }
      }
    }
  ], []);

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <MaterialReactTable
        columns={columns}
        data={data}
        enableColumnFilters
        enableFilters
        
        // Global date picker configuration
        muiFilterDatePickerProps={{
          // Consistent date adapter
          slots: {
            textField: (props) => (
              <TextField 
                {...props}
                error={!dateIsValid(props.value)}
              />
            )
          }
        }}
      />
    </LocalizationProvider>
  );
};

export default YourComponent;

// Required dependencies:
// npm install @mui/x-date-pickers date-fns @mui/material

â‰ ====GPT=====


import React, { useMemo, useState } from 'react';
import MaterialReactTable from 'material-react-table';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import dayjs from 'dayjs';

const YourComponent = () => {
  const [data, setData] = useState([
    { id: 1, date: '2023-01-01' },
    { id: 2, date: '2023-06-15' },
    { id: 3, date: '2024-02-20' },
  ]);

  // State to manage min and max date
  const [minDate, setMinDate] = useState(null);
  const [maxDate, setMaxDate] = useState(null);

  const columns = useMemo(() => [
    {
      accessorKey: 'date',
      header: 'Date',
      filterVariant: 'date-range',
      filterFn: 'between',

      muiFilterDatePickerProps: ({ column }) => ({
        minDate: minDate,
        maxDate: maxDate,
        onChange: (newValue) => {
          if (column.id === 'minDate') {
            setMinDate(newValue);
            // Ensure maxDate is not earlier than minDate
            if (maxDate && dayjs(newValue).isAfter(maxDate)) {
              setMaxDate(null);
            }
          } else if (column.id === 'maxDate') {
            setMaxDate(newValue);
            // Ensure minDate is not later than maxDate
            if (minDate && dayjs(newValue).isBefore(minDate)) {
              setMinDate(null);
            }
          }
        },
      }),
    }
  ], [minDate, maxDate]);

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <MaterialReactTable
        columns={columns}
        data={data}
        enableColumnFilters
        enableFilters
        muiFilterDatePickerProps={{
          minDate: minDate,
          maxDate: maxDate,
        }}
      />
    </LocalizationProvider>
  );
};

export default YourComponent;

gpt2
import React, { useMemo, useState } from "react";
import MaterialReactTable from "material-react-table";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import dayjs from "dayjs";

const YourComponent = () => {
  const [data, setData] = useState([
    { id: 1, date: "2023-01-01" },
    { id: 2, date: "2023-06-15" },
    { id: 3, date: "2024-02-20" },
  ]);

  // State for filter dates
  const [minDate, setMinDate] = useState(null);
  const [maxDate, setMaxDate] = useState(null);

  // Filter logic to disable dates dynamically
  const filteredData = useMemo(() => {
    return data.filter((row) => {
      const rowDate = dayjs(row.date);
      if (minDate && rowDate.isBefore(minDate)) return false;
      if (maxDate && rowDate.isAfter(maxDate)) return false;
      return true;
    });
  }, [data, minDate, maxDate]);

  const columns = useMemo(
    () => [
      {
        accessorKey: "date",
        header: "Date",
      },
    ],
    []
  );

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <div style={{ display: "flex", gap: "16px", marginBottom: "20px" }}>
        <DatePicker
          label="Min Date"
          value={minDate}
          onChange={(newValue) => {
            setMinDate(newValue);
            if (maxDate && dayjs(newValue).isAfter(maxDate)) {
              setMaxDate(null); // Reset maxDate if minDate is greater
            }
          }}
          disableFuture
        />
        <DatePicker
          label="Max Date"
          value={maxDate}
          onChange={(newValue) => {
            setMaxDate(newValue);
            if (minDate && dayjs(newValue).isBefore(minDate)) {
              setMinDate(null); // Reset minDate if maxDate is earlier
            }
          }}
          disableFuture
          minDate={minDate} // Enforce minDate selection
        />
      </div>
      <MaterialReactTable columns={columns} data={filteredData} />
    </LocalizationProvider>
  );
};

export default YourComponent;
